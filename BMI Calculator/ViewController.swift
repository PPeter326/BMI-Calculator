//
//  ViewController.swift
//  BMI Calculator
//
//  Created by Peter Wu on 9/22/18.
//  Copyright Â© 2018 Peter Wu. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    
    // MARK: - Views
    @IBOutlet weak var weightButton: UIButton!
    @IBOutlet weak var heightButton: UIButton!
    @IBOutlet weak var BMILabel: UILabel!
    @IBOutlet weak var BMICategoryLabel: UILabel!
    @IBOutlet weak var pickerView: UIPickerView!
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    private var pickerViewController = PickerViewController()
    
    // MARK: - Model
    
    /// The userInput encapsulates the data generated by the user and is saved into the file system.  If a user file existed, the userInput will load when the app opens and populates the views with user's data
    private var userInput: Measurement {
        get {
            return Measurement(weightInLbs: weightInLbs, heightInInches: totalHeightInInches, weightInKgs: weightInKgs, totalHeightInCm: totalHeightCentimeters)
        }
        set {
            weightInLbs = newValue.weightInLbs
            totalHeightInInches = newValue.totalHeightInInches
            weightInKgs = newValue.weightInKgs
            totalHeightCentimeters = newValue.totalHeightInCm
        }
    }
    
    
    
    // MARK: - Weight/Height Input
    private var weightInLbsWholeNumber = 170
    private var weightInLbsDecimal = 0
    private var weightInLbs: Double {
        get {
            return Double(weightInLbsWholeNumber) + Double(weightInLbsDecimal) / 10
        }
        set {
            weightInLbsWholeNumber = Int(newValue)
            let decimalDifference = newValue - Double(weightInLbsWholeNumber)
            let decimalDifferenceInTenths = decimalDifference * 10
            let decimalDifferenceInTenthsRounded = round(decimalDifferenceInTenths)
            weightInLbsDecimal = Int(decimalDifferenceInTenthsRounded)
        }
    }
    private var weightInKgWholeNumber = 50
    private var weightInKgDecimal = 9
    private var weightInKgs: Double {
        get {
            return Double(weightInKgWholeNumber) + Double(weightInKgDecimal) / 10
        }
        set {
            weightInKgWholeNumber = Int(newValue)
            let decimalDifference = newValue - Double(weightInKgWholeNumber)
            let decimalDifferenceInTenths = decimalDifference * 10
            let decimalDifferenceInTenthsRounded = round(decimalDifferenceInTenths)
            weightInKgDecimal = Int(decimalDifferenceInTenthsRounded)
        }
    }
    
    private var heightInFt: Int = 5
    private var heightInInches: Int = 10
    private var totalHeightInInches: Double {
        get {
          return Double(heightInFt * 12) + Double(heightInInches)
        }
        set {
            heightInFt = Int(newValue / 12)
            heightInInches = Int(newValue) % 12
        }
    }
    
    private var heightInMeter = 1
    private var heightInCentimeter = 60
    private var totalHeightCentimeters: Double {
        get {
            return Double(heightInMeter * 100) + Double(heightInCentimeter)
        }
        set {
            heightInMeter = Int(newValue / 100)
            heightInCentimeter = Int(newValue) % 100
        }
    }
    

    private struct ImperialNumberPickerViewRange {
        static let weightWholeNumberRange = Array(90...443)
        static let weightDecimalRange = Array(0...9)
        static let heightInFeetRange = Array(4...6)
        static let heightInInchesRange = Array(0...11)
    }
    
    private struct MetricNumberPickerViewRange {
        static let weightWholeNumberRange = Array(40...200)
        static let weightDecimalRange = Array(0...9)
        static let heightInMeterRange = 1
        static let heightInCentimeterRange = Array(40...99)
    }
    
    // MARK: - Formatter
    private let numberFormatter: NumberFormatter = {
       let formatter = NumberFormatter()
        formatter.maximumFractionDigits = 1
        return formatter
    }()
    
    // MARK: - BMI
    private var calculator = BMICalculator()
    private var BMI: Double? {
      return calculator.calculateBMI(weight: getWeightValue(), height: getHeightValue())
    }
    
    private func getWeightValue() -> Double {
        // if imperial -> return converted weight
        // if metric -> return self
        
        let context = inputCoordinator.weightContext
        switch context.measurementSystem {
        case .imperial:
            return weightInLbs.lbToKg
        case .metric:
            return weightInKgs
        }
    }
    
    private func getHeightValue() -> Double {
        let context = inputCoordinator.heightContext
        switch context.measurementSystem {
        case .imperial:
            return totalHeightInInches.inchToMeter
        case .metric:
            return totalHeightCentimeters / 100
        }
        
    }
    
    private var BMIDescription: String? {
        return BMI != nil ? category(of: BMI!).describe() : nil
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Initial set up
        if let measurement = Measurement.loadFromFile() {
            userInput = measurement
        } else {
            userInput = Measurement.loadSampleMeasurement()
        }
        updateAllUI()
    }

    // MARK: - User Interaction
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        // When user touches outside of the controls
        // switch out of input mode
        // update UI
        inputCoordinator.deactivateInput()
        updateAllUI()
    }
    
    
    @IBAction func WeightButtonTouched(_ sender: UIButton? = nil) {
        if inputCoordinator.currentInputContext() != nil {
            inputCoordinator.deactivateInput()
            updateAllUI()
        } else {
            inputCoordinator.activateWeightInput()
            updateAllUI()
            pickerViewSelectsWeight()
        }
    }
    
    @IBAction func heightButtonTouched(_ sender: UIButton? = nil) {
        if inputCoordinator.currentInputContext() != nil {
            inputCoordinator.deactivateInput()
            updateAllUI()
        } else {
            inputCoordinator.activateHeightInput()
            updateAllUI()
            pickerViewSelectsHeight()
        }
    }
    
    
    
    @IBAction func segmentedControlTouched(_ sender: UISegmentedControl) {
        inputCoordinator.updateInputMeasurement(forSelectedSegmentIndex: sender.selectedSegmentIndex)
        // reload pickerView to reflect input measurement
        pickerView.reloadAllComponents()
        // pickerview select proper values based on body measurement of current input context
        inputCoordinator.currentInputContext()!.bodyMeasurement == .weight ? pickerViewSelectsWeight() : pickerViewSelectsHeight()
        // update weight/height button
        updateWeightButton()
        updateHeightButton()
    }
    
    
    
    // MARK: - Input
    
    fileprivate var inputCoordinator = InputCoordinator()
    
    private func pickerViewSelectsWeight() {
        if let activeContext = inputCoordinator.currentInputContext(), activeContext.bodyMeasurement == .weight {
            if activeContext.measurementSystem == .imperial {
                let weightInLbsWholeNumberIndex = ImperialNumberPickerViewRange.weightWholeNumberRange.firstIndex(of: weightInLbsWholeNumber)!
                let weightInLbsDecimalIndex = ImperialNumberPickerViewRange.weightDecimalRange.firstIndex(of: weightInLbsDecimal)!
                pickerView.selectRow(weightInLbsWholeNumberIndex, inComponent: 0, animated: false)
                pickerView.selectRow(weightInLbsDecimalIndex, inComponent: 1, animated: false)
            } else {
                let weightInKgWholeNumberIndex = MetricNumberPickerViewRange.weightWholeNumberRange.firstIndex(of: weightInKgWholeNumber)!
                let weightInKgDecimalIndex = MetricNumberPickerViewRange.weightDecimalRange.firstIndex(of: weightInKgDecimal)!
                pickerView.selectRow(weightInKgWholeNumberIndex, inComponent: 0, animated: false)
                pickerView.selectRow(weightInKgDecimalIndex, inComponent: 1, animated: false)
            }
        } else {
            fatalError("Invalid - there should be active context when pickerViewSelectsWeight() is called")
        }
    }
    
    private func pickerViewSelectsHeight() {
        
        if let activeContext = inputCoordinator.currentInputContext(), activeContext.bodyMeasurement == .height {
            if activeContext.measurementSystem == .imperial {
                let heightInFeetIndex = ImperialNumberPickerViewRange.heightInFeetRange.firstIndex(of: heightInFt)!
                let heightInInchIndex = ImperialNumberPickerViewRange.heightInInchesRange.firstIndex(of: heightInInches)!
                pickerView.selectRow(heightInFeetIndex, inComponent: 0, animated: false)
                pickerView.selectRow(heightInInchIndex, inComponent: 2, animated: false)
            } else {
                let heightInMeterIndex = 0
                let heightInCentimeterIndex = MetricNumberPickerViewRange.heightInCentimeterRange.firstIndex(of: heightInCentimeter)!
                pickerView.selectRow(heightInMeterIndex, inComponent: 0, animated: false)
                pickerView.selectRow(heightInCentimeterIndex, inComponent: 2, animated: false)
            }
        } else {
            fatalError("Invalid - there should be active context when pickerViewSelectsWeight() is called")
        }
    }
    
    // MARK: - UI Update
    private func updateAllUI() {
        
        updateWeightButton()
        updateHeightButton()
        updateSegmentedControl()
        updatePickerView()
        updateBMILabels()
    }
    
    private func updateWeightButton() {
        // update button title color depending on input state
        if let activeContext = inputCoordinator.currentInputContext(), activeContext.bodyMeasurement == .weight {
            weightButton.setTitleColor(#colorLiteral(red: 0.2392156869, green: 0.6745098233, blue: 0.9686274529, alpha: 1), for: .normal)
        } else {
            weightButton.setTitleColor(#colorLiteral(red: 0.6666666865, green: 0.6666666865, blue: 0.6666666865, alpha: 1), for: .normal)
        }
        // update button title dpeneding on measurement system selected by user
        switch inputCoordinator.weightContext.measurementSystem {
        case .imperial:
            weightButton.setTitle("\(weightInLbs) lbs", for: .normal)
        case .metric:
            weightButton.setTitle("\(weightInKgs) kg", for: .normal)
        }
    }
    
    private func updateHeightButton() {
        // update button title color depending on input state
        if let activeContext = inputCoordinator.currentInputContext(), activeContext.bodyMeasurement == .height {
            heightButton.setTitleColor(#colorLiteral(red: 0.2392156869, green: 0.6745098233, blue: 0.9686274529, alpha: 1), for: .normal)
        } else {
            heightButton.setTitleColor(#colorLiteral(red: 0.6666666865, green: 0.6666666865, blue: 0.6666666865, alpha: 1), for: .normal)
        }
        // update button title dpeneding on measurement system selected by user
        switch inputCoordinator.heightContext.measurementSystem {
        case .imperial:
            heightButton.setTitle("\(heightInFt) ft \(heightInInches) in", for: .normal)
        case .metric:
            heightButton.setTitle("\(heightInMeter) m \(heightInCentimeter) cm", for: .normal)
        }
    }
    
    private func updateSegmentedControl() {
        segmentedControl.isHidden = (inputCoordinator.mode == .Viewing)
        
        if let currentContext = inputCoordinator.currentInputContext() {
        let currentBodyMeasurement = currentContext.bodyMeasurement
            switch currentBodyMeasurement  {
            case .weight:
                segmentedControl.setTitle("Lbs", forSegmentAt: 0)
                segmentedControl.setTitle("Kg", forSegmentAt: 1)
                if currentContext.measurementSystem == .imperial {
                    segmentedControl.selectedSegmentIndex = 0
                } else {
                    segmentedControl.selectedSegmentIndex = 1
                }
            case .height:
                segmentedControl.setTitle("Ft/In", forSegmentAt: 0)
                segmentedControl.setTitle("M/Cm", forSegmentAt: 1)
                if currentContext.measurementSystem == .imperial {
                    segmentedControl.selectedSegmentIndex = 0
                } else {
                    segmentedControl.selectedSegmentIndex = 1
                }
            }
        }
    }
    
    private func updatePickerView() {
        
        pickerView.isHidden = (inputCoordinator.mode == .Viewing)
        pickerView.reloadAllComponents()
    }
    
    func updateBMILabels() {
        // update BMI Label
        if let BMI = BMI, let BMIDescription = BMIDescription {
            BMILabel.text = numberFormatter.string(from: NSNumber(value: BMI))
            BMICategoryLabel.text = "\(BMIDescription)"
        } else {
            BMILabel.text = "N/A"
            BMICategoryLabel.text = "We can't calculate based on your height and weight"
        }
    }
    
    
    
    private func category(of BMI: Double) -> BMICategory {
        switch BMI {
        case 0..<18.5:
            return .underweight
        case 18.5..<25:
            return .normalWeight
        case 25..<30:
            return .overweight
        case 30...:
            return .obesity
        default:
            return .undetermined
        }
    }
    
    
    private enum BMICategory {
        
        case underweight, normalWeight, overweight, obesity, undetermined
        
        func describe() -> String {
            switch self {
            case .underweight:
                return "Underweight BMI"
            case .normalWeight:
                return "Normal Weight BMI"
            case .overweight:
                return "Overweight BMI"
            case .obesity:
                return "Obesity BMI"
            case .undetermined:
                return "Sorry, we're unable to determine your BMI"
            }
        }
    }

}

// MARK: - Extension
extension ViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    
    
    
    // MARK: PickerView Delegate Methods
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        let currentContext = inputCoordinator.currentInputContext()!
        switch currentContext.bodyMeasurement {
        case .weight:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    return String(ImperialNumberPickerViewRange.weightWholeNumberRange[row])
                case 1:
                    return ".\(ImperialNumberPickerViewRange.weightDecimalRange[row])"
                case 2:
                    return "lbs"
                default:
                    return nil
                }
            } else {
                switch component {
                case 0:
                    return String(MetricNumberPickerViewRange.weightWholeNumberRange[row])
                case 1:
                    return ".\(MetricNumberPickerViewRange.weightDecimalRange[row])"
                case 2:
                    return "kg"
                default:
                    return nil
                }
            }
        case .height:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    return String(ImperialNumberPickerViewRange.heightInFeetRange[row])
                case 1:
                    return "ft"
                case 2:
                    return "\(ImperialNumberPickerViewRange.heightInInchesRange[row])"
                case 3:
                    return "in"
                default:
                    return nil
                }
            } else {
                switch component {
                case 0:
                    return String(MetricNumberPickerViewRange.heightInMeterRange)
                case 1:
                    return "m"
                case 2:
                    return "\(MetricNumberPickerViewRange.heightInCentimeterRange[row])"
                case 3:
                    return "cm"
                default:
                    return nil
                }
            }
        }
    }
    
    
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        let currentContext = inputCoordinator.currentInputContext()!
        switch currentContext.bodyMeasurement {
        case .weight:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    weightInLbsWholeNumber = ImperialNumberPickerViewRange.weightWholeNumberRange[row]
                case 1:
                    weightInLbsDecimal = ImperialNumberPickerViewRange.weightDecimalRange[row]
                default:
                    break
                }
            } else {
                switch component {
                case 0:
                    weightInKgWholeNumber = MetricNumberPickerViewRange.weightWholeNumberRange[row]
                case 1:
                    weightInKgDecimal = MetricNumberPickerViewRange.weightDecimalRange[row]
                default:
                    break
                }
            }
            updateWeightButton()
        case .height:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    heightInFt = ImperialNumberPickerViewRange.heightInFeetRange[row]
                case 2:
                    heightInInches = ImperialNumberPickerViewRange.heightInInchesRange[row]
                default:
                    break
                }
            } else {
                switch component {
                case 0:
                    heightInMeter = MetricNumberPickerViewRange.heightInMeterRange
                case 2:
                    heightInCentimeter = MetricNumberPickerViewRange.heightInCentimeterRange[row]
                default:
                    break
                }
            }
            updateHeightButton()
        }
        // save user input
        Measurement.saveToFile(measurement: userInput)
    }
    
    // MARK: PickerView Datasource Methods
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        if let currentContext = inputCoordinator.currentInputContext() {
            return pickerViewController.numberOfColumns(ofContext: currentContext)
        } else {
            return 0
        }
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        
        let currentContext = inputCoordinator.currentInputContext()!
        switch currentContext.bodyMeasurement {
        case .weight:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    return ImperialNumberPickerViewRange.weightWholeNumberRange.count
                case 1:
                    return ImperialNumberPickerViewRange.weightDecimalRange.count
                case 2:
                    return 1
                default:
                    return 1
                }
            } else {
                switch component {
                case 0:
                    return MetricNumberPickerViewRange.weightWholeNumberRange.count
                case 1:
                    return MetricNumberPickerViewRange.weightDecimalRange.count
                case 2:
                    return 1
                default:
                    return 1
                }
            }
        case .height:
            if currentContext.measurementSystem == .imperial {
                switch component {
                case 0:
                    return ImperialNumberPickerViewRange.heightInFeetRange.count
                case 1:
                    return 1
                case 2:
                    return ImperialNumberPickerViewRange.heightInInchesRange.count
                default:
                    return 1
                }
            } else {
                switch component {
                case 0:
                    return 1
                case 1:
                    return 1
                case 2:
                    return MetricNumberPickerViewRange.heightInCentimeterRange.count
                default:
                    return 1
                }
            }
        }
    }
}


extension ViewController {
    // The PickerViewController keeps track of the data and layout for pickerview given the inputContext
    //
    private struct PickerViewController {
        func numberOfColumns(ofContext context: MeasurementContext) -> Int {
            switch context.bodyMeasurement {
            case .height:
                return 4
            case .weight:
                return 3
            default:
                fatalError("Invalid number state for calling method numberOfColumns")
            }
        }
    }
}
